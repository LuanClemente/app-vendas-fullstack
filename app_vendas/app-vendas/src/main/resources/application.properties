# ======== CONFIGURAÇÃO DO BANCO DE DADOS POSTGRESQL ========

# A URL (endereço) do nosso banco de dados.
# Ele roda localmente (localhost) na porta padrão (5432).
# Vamos chamar nosso banco de dados de "vendas_db" (vamos criá-lo no próximo passo).
spring.datasource.url=jdbc:postgresql://localhost:5432/vendas_db

# O nome de usuário padrão do PostgreSQL.
spring.datasource.username=postgres

# !! ATENÇÃO !! Troque "SUA_SENHA_AQUI" pela senha que você anotou durante a instalação do PostgreSQL.
spring.datasource.password=45115722

# ======== CONFIGURAÇÃO DO HIBERNATE (JPA) ========

# Esta é a configuração mais "mágica".
# "update" significa que o Spring vai olhar para nosso código Java (nossas futuras classes Usuario, Venda, etc.)
# e vai automaticamente CRIAR ou ATUALIZAR as tabelas no banco de dados para que correspondam ao nosso código.
# Isso nos poupa de escrever comandos SQL para criar tabelas no início!
spring.jpa.hibernate.ddl-auto=update

# Opcional, mas muito útil para aprender:
# Com esta linha, veremos no console do VS Code todos os comandos SQL que o Spring está executando por baixo dos panos.
spring.jpa.show-sql=true
# Muda a porta padrão do servidor de 8080 para 8081
server.port=8081
# Aumenta o nível de log para o pacote de segurança do Spring.
# Isso nos mostrará em detalhes cada passo que o Spring Security está tomando.
logging.level.org.springframework=DEBUG
# Chave secreta usada para assinar e validar os Tokens JWT.
# Em um projeto real, esta chave deve ser muito mais complexa e guardada de forma segura
# (como uma variável de ambiente), e não diretamente no código.
api.security.token.secret=meu-super-token-secreto-para-gerar-jwt

logging.level.org.springframework.security=DEBUG