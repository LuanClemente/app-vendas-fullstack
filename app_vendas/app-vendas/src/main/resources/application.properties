# =======================================
# CONFIGURAÇÃO DO BANCO DE DADOS (RAILWAY)
# =======================================
# O Railway injeta uma única variável chamada DATABASE_URL com todas as informações.
# O Spring Boot é inteligente o suficiente para usar esta variável diretamente.
spring.datasource.url=${{ Postgres.DATABASE_URL }}

# Configuração explícita do Dialeto moderno do PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


# =======================================
# CONFIGURAÇÃO DO SERVIDOR
# =======================================
# O Railway define a porta automaticamente através da variável de ambiente PORT.
# O valor :8081 é um padrão para rodar localmente, se a variável não existir.
server.port=${PORT:8081}

# =======================================
# CONFIGURAÇÃO DO HIBERNATE (JPA)
# =======================================
# "update" -> atualiza o banco com base nas suas entidades.
spring.jpa.hibernate.ddl-auto=update
# Mostra o SQL gerado no console (bom para debug).
spring.jpa.show-sql=true
# Formata o SQL mostrado no console para ficar mais legível.
spring.jpa.properties.hibernate.format_sql=true

# =======================================
# CONFIGURAÇÃO DE SEGURANÇA E JWT
# =======================================
# Chave secreta para os Tokens JWT, lida de uma variável de ambiente.
# Adicionamos um valor padrão para que funcione localmente também.
api.security.token.secret=${API_SECURITY_TOKEN_SECRET:meu-super-token-secreto-para-gerar-jwt}
