# =======================================
# CONFIGURAÇÃO DO BANCO DE DADOS (RAILWAY)
# =======================================
# O Railway injeta uma variável chamada DATABASE_URL com todas as informações.
spring.datasource.url=${DATABASE_URL}  # Usando diretamente a variável DATABASE_URL

# Como estamos usando a URL completa de conexão, não precisamos definir username e password manualmente.
# Caso não use Railway, você pode configurar diretamente o username e password conforme o padrão do PostgreSQL.
# spring.datasource.username=seu-usuario
# spring.datasource.password=sua-senha

# Configurações do Hibernate e Dialeto do PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# =======================================
# CONFIGURAÇÃO DO SERVIDOR
# =======================================
server.port=${PORT:8081}  # Usando a variável de ambiente PORT ou padrão 8081 caso não exista.

# =======================================
# CONFIGURAÇÃO DO HIBERNATE (JPA)
# =======================================
# Usando "update" para que o Hibernate crie/atualize o esquema do banco de dados com base nas entidades.
spring.jpa.hibernate.ddl-auto=update

# Exibe os SQLs gerados para fins de depuração
spring.jpa.show-sql=true

# Formata o SQL gerado para torná-lo legível no console
spring.jpa.properties.hibernate.format_sql=true

# =======================================
# CONFIGURAÇÃO DE SEGURANÇA E JWT
# =======================================
# Chave secreta para JWT
api.security.token.secret=${API_SECURITY_TOKEN_SECRET:meu-super-token-secreto-para-gerar-jwt}
